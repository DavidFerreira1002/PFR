obstacle_range: 4.5
raytrace_range: 3.0
#footprint: [[-0.35, -0.35], [-0.35, 0.35], [0.35, 0.35] ,[0.35, -0.35]]
#footprint: [[-0.1, -0.1], [-0.1, 0.1], [0.1, 0.1] ,[0.1, -0.1]]
robot_radius: 0.26
inflation_radius: 0.26


plugins: 
    - {name: static_map,           type: "costmap_2d::StaticLayer"}
    - {name: inflation_layer,      type: "costmap_2d::InflationLayer"}
   #- {name: obstacles,            type: "costmap_2d::VoxelLayer"}
    #- {name: proxemic_layer,       type: "social_navigation_layers::ProxemicLayer"}
    #- {name: passing_layer ,       type: "social_navigation_layers::PassingLayer"}
   #- {name: rgbd_obstacle_layer,  type: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"}


static_map:

 observation_sources:   laser_scan_sensor

 laser_scan_sensor: {sensor_frame: base_laser, data_type: LaserScan, topic: base_scan, marking: true, clearing: true}

inflation_layer:

 observation_sources:   laser_scan_sensor #point_cloud_sensor

 laser_scan_sensor: {sensor_frame: base_laser, data_type: LaserScan, topic: base_scan, marking: true, clearing: true}

#  point_cloud_sensor: {sensor_frame: camera_depth_optical_frame, data_type: PointCloud2, topic: camera/depth/color/points, marking: true, clearing: true}

#obstacles:
#
#  observation_sources:  point_cloud_sensor laser_scan_sensor
#
#  laser_scan_sensor: {sensor_frame: lidar_link, data_type: LaserScan, topic: /scan, marking: true, clearing: true}
#
#  point_cloud_sensor: {sensor_frame: camera_depth_optical_frame, data_type: PointCloud2, topic: camera/depth/color/points, marking: true, clearing: true}

# proxemic_layer:

#   observation_sources:  point_cloud_sensor laser_scan_sensor

#   laser_scan_sensor: {sensor_frame: base_laser, data_type: LaserScan, topic: base_scan, marking: true, clearing: true}

#   point_cloud_sensor: {sensor_frame: camera_depth_optical_frame, data_type: PointCloud2, topic: camera/depth/points, marking: true, clearing: true}

# passing_layer:

#   observation_sources:  point_cloud_sensor laser_scan_sensor

#   laser_scan_sensor: {sensor_frame: base_laser, data_type: LaserScan, topic: base_scan, marking: true, clearing: true}

#   point_cloud_sensor: {sensor_frame: camera_depth_optical_frame, data_type: PointCloud2, topic: camera/depth/points, marking: true, clearing: true}


# rgbd_obstacle_layer:
#   enabled:               true
#   voxel_decay:           0.5     #seconds if linear, e^n if exponential
#   decay_model:           0      #0=linear, 1=exponential, -1=persistent
#   voxel_size:            0.05   #meters
#   track_unknown_space:   true   #default space is unknown
#   observation_persistence: 0.0  #seconds
#   max_obstacle_height:   2.0    #meters
#   unknown_threshold:     15     #voxel height
#   mark_threshold:        0      #voxel height
#   update_footprint_enabled: true
#   combination_method:    1      #1=max, 0=override
#   obstacle_range:        3.0    #meters
#   origin_z:              0.0    #meters
#   publish_voxel_map:     true   # default off
#   transform_tolerance:   0.2    # seconds
#   mapping_mode:          false  # default off, saves map not for navigation
#   map_save_duration:     60     #default 60s, how often to autosave
#   observation_sources:   rgbd1_clear rgbd1_mark
#   rgbd1_mark:
#     sensor_frame: camera_depth_optical_frame
#     data_type: PointCloud2
#     topic: camera/depth/color/points
#     marking: true
#     clearing: false
#     min_obstacle_height: 0.2     #default 0, meters
#     max_obstacle_height: 0.8   #default 3, meters
#     expected_update_rate: 10   #default 0, if not updating at this rate at least, remove from buffer
#     observation_persistence: 0.0 #default 0, use all measurements taken during now-value, 0=latest 
#     inf_is_valid: false          #default false, for laser scans
#     clear_after_reading: false    #default false, clear the buffer after the layer gets readings from it
#     filter: "voxel"              #default passthrough, apply "voxel", "passthrough", or no filter to sensor data, recommended to have at one filter on
#     voxel_min_points: 0          #default 0, minimum points per voxel for voxel filter
#   rgbd1_clear:
#     enabled: true                #default true, can be toggled on/off with associated service call
#     sensor_frame: camera_depth_optical_frame
#     data_type: PointCloud2
#     topic: camera/depth/color/points
#     marking: false
#     clearing: true
#     min_z: 0.1                   #default 0, meters
#     max_z: 10.0                   #default 10, meters
#     vertical_fov_angle: 0.7      #default 0.7, radians
#     horizontal_fov_angle: 1.04   #default 1.04, radians
#     decay_acceleration: 1.       #default 0, 1/s^2. If laser scanner MUST be 0
#     model_type: 0                #default 0 (depth camera). Use 1 for 3D Lidar